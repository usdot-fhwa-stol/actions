name: C++ Sonar Scanner workflow

on:
  workflow_call:
    inputs:
      build-image-tag:
        description: 'Build image tag for ghcr.io/usdot-fhwa-stol/carma-builds'
        required: false
        type: string
        default: 'jammy'
      build-wrapper-out-dir:
        description: 'Build wrapper output directory'
        required: false
        type: string
        default: 'bw_output'
      sonar-organization:
        description: 'Sonar Cloud organization id'
        required: false
        type: string
        default: 'usdot-fhwa-stol'
      sonar-project-key:
        description: 'Sonar Cloud project key'
        required: true
        type: string
    secrets:
      github-token:
        required: true
      sonarcloud-token:
        required: true

jobs:
  image-name-get:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set_image.outputs.image }}
    steps:
      - id: set_image
        run: echo "image=${{ inputs.build-image-tag }}" >> $GITHUB_OUTPUT
  sonar-scanner-cpp:
    runs-on: ubuntu-latest
    needs: image-name-get
    container:
      image: ghcr.io/usdot-fhwa-stol/carma-builds-x64:${{ needs.image-name-get.outputs.image }}
    steps:
      - name: Install curl, zip, git, gcovr
        run: |
          apt update
          export DEBIAN_FRONTEND=noninteractive
          apt-get install -y curl zip git gcovr
      - uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name:  Install sonar-scanner and build-wrapper
        uses: sonarsource/sonarcloud-github-c-cpp@v2
      - name: Generate sonar-project.properties
        run: |
          # Write sonar-project.properties file
          {
            echo "sonar.host.url=https://sonarcloud.io"
            echo "sonar.login=${SONAR_TOKEN}"
            # set up organization and project keys
            echo "sonar.organization=${{ inputs.sonar-organization }}"
            echo "sonar.projectKey=${{ inputs.sonar-project-key }}"
            # set up common Sonar scan properties
            echo "sonar.sources=src"
            # Note: For C++ setting this field does not cause test analysis to occur. It only allows the test source code to be evaluated.
            echo "sonar.tests=test"
            echo "sonar.coverageReportPaths=build/coverage_sonar.xml"
            echo "sonar.cfamily.build-wrapper-output=${{ inputs.build-wrapper-out-dir }}"
          } > sonar-project.properties
      - name: Run install_dependencies.sh script
        run: |
          if [ -f install_dependencies.sh ]; then
            chmod +x install_dependencies.sh
            ./install_dependencies.sh
          fi
      - name: Run build script with build-wrapper
        # here goes your compilation wrapped with build-wrapper; See https://docs.sonarcloud.io/advanced-setup/languages/c-c-objective-c/#analysis-steps-using-build-wrapper for more information
        uses: usdot-fhwa-stol/actions/build-cpp-library@main
        with:
          build-wrapper: build-wrapper-linux-x86-64 --out-dir ${{ inputs.build-wrapper-out-dir }}
          build-options: -c
      - name: Check coverage output
        run: |
          # check for coverage in expected location
          ls -al build/coverage_sonar.xml
      - name: Run sonar-scanner
        uses: usdot-fhwa-stol/actions/sonar-scanner@main
        with:
          sonar-properties-path: ./sonar-project.properties
          sonar-token: ${{ secrets.sonarcloud-token }}
          working-dir: ${{ github.workspace }}
